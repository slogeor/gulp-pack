/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	GLOBAL.ns('util');
	__webpack_require__(3);
	console.log(GLOBAL);


/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	(function () {
	    var toString = Object.prototype.toString;
	
	    var isObject = function (factory) {
	        return toString.call(factory) === '[object Object]';
	    };
	
	    var isFunction = function (factory) {
	        return toString.call(factory) === '[object Function]';
	    };
	
	    /**
	     * @descript 命名空间管理
	     * @namespace GLOBAL
	     */
	    if (!isObject(window.GLOBAL)) {
	        window.GLOBAL = {};
	    }
	
	    /**
	     * 定义命名空间
	     * @param namespaceStr {String} 命名空间字符串
	     * @return {GLOBAL} 返回全局对象GLOBAL
	     */
	    window.GLOBAL.ns = function (namespaceStr) {
	        var namespaceList = namespaceStr && namespaceStr.split('.') || [];
	        var self = window.GLOBAL;
	
	        for (var i = 0, len = namespaceList.length; i < len; i++) {
	            self = self[namespaceList[i]] = self[namespaceList[i]] || {};
	        }
	        return self;
	    };
	
	    /**
	     * 定义模块,默认挂在GLOBAL下
	     * @param name {String} 名称
	     * @param factory {Object|Function} 扩展对象或构造方法
	     */
	    window.GLOBAL.define = function (name, factory) {
	        if (arguments.length < 2) {
	            return;
	        }
	
	        /**
	         * 命名空间存在且有属性
	         */
	        if (window.GLOBAL[name] && isObject(window.GLOBAL[name]) || isFunction(window.GLOBAL[name])) {
	            throw new Error('该命名空间已存在,不允许覆盖');
	        }
	
	        /**
	         * 向命名空间下挂
	         */
	        if (isFunction(factory)) {
	            window.GLOBAL[name] = factory;
	        }
	    };
	}());


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);


/***/ },
/* 4 */
/***/ function(module, exports) {

	var _isDate = function (_d) {
	    return Object.prototype.toString.call(_d) === '[object Date]';
	};
	
	var D = {
	    /**
	     *   转成日期类型
	     *   @param {number|string|date}  o 日期
	     *   @eg toDate('2016-10-10 11:11:11')
	     */
	    toDate: function (o) {
	        //判断是数字类型
	        if (typeof (o) == 'number') return new Date(o);
	        //判断是字符串类型
	        if (typeof (o) == 'string') return new Date(o.replace(/-/g, '/'));
	
	        //日期类型，去除时，分，秒
	        if (_isDate(o)) {
	            return o;
	        } else {
	            return new Date();
	        }
	    },
	
	    /**
	     *   增加日期
	     *   @param {string| date} 日期
	     *   @param {string} y:年， m：月，d：天
	     *   @param {number}
	     *   @eg addDate(new Date, 'd', 3)
	     */
	    addDate: function (o, type, num) {
	        //转换成日期类型
	        var date = D.toDate(o),
	            type = type.toLowerCase();
	
	        switch (type) {
	            case 'y':
	                date.setFullYear(date.getFullYear() + num);
	                break;
	            case 'm':
	                date.setMonth(date.getMonth() + num);
	                break;
	            case 'd':
	                date.setDate(date.getDate() + num);
	        }
	        return date;
	    },
	
	    /**
	     *   计算两个日期之间相差的月份，包括两边界
	     *   @param {number|string|date} from 开始时间 to 结束时间
	     */
	    monthDiff: function (from, to) {
	        var months;
	        //判断是否日期类型
	        if (!_isDate(from) || !_isDate(to)) {
	            from = D.toDate(from);
	            to = D.toDate(to);
	        }
	        //计算相差月数
	        months = (to.getFullYear() - from.getFullYear()) * 12 + (to.getMonth() - from.getMonth());
	        //若 from<=to 时，+1表示加上边界值；from > to时，-1表示加上边界
	        months = (months >= 0 ? months + 1 : months - 1);
	        return months;
	    },
	
	    /**
	     *   计算两个日期之间相差的天数，不包括边界值
	     *   @param {number|string|date} from 开始时间 to 结束时间
	     */
	    dayDiff: function (from, to) {
	        var days;
	        //判断是否日期类型
	        if (_isDate(from) && _isDate(to)) {
	            days = (to.getTime() - from.getTime()) / 86400000;
	        } else {
	            //string&number类型需要先转成日期类型
	            days = (D.toDate(to).getTime() - D.toDate(from).getTime()) / 86400000;
	        }
	        return days;
	    },
	
	    /**
	     *   日期格式化
	     *   @param {number|string|date, int}  o 日期  formatString 格式化方式
	     *   @eg: formatStr(new Date(), 'YYYY-MM-DD hh:mm:ss')
	     */
	
	    formatStr: function (o, formatString) {
	        //转换成日期类型
	        var date = D.toDate(o);
	        /*
	         * eg:formatString='YYYY-MM-DD hh:mm:ss';
	         */
	        var _o = {
	            'M+': date.getMonth() + 1,
	            //month
	            'D+': date.getDate(),
	            //day
	            'h+': date.getHours(),
	            //hour
	            'm+': date.getMinutes(),
	            //minute
	            's+': date.getSeconds(),
	            //second
	            'q+': Math.floor((date.getMonth() + 3) / 3),
	            //quarter
	            'S': date.getMilliseconds() //millisecond
	        };
	
	        if (/(Y+)/.test(formatString)) {
	            formatString = formatString.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
	        }
	
	        for (var k in _o) {
	            if (new RegExp('(' + k + ')').test(formatString)) {
	                formatString = formatString.replace(RegExp.$1, RegExp.$1.length == 1 ? _o[k] : ('00' + _o[k]).substr(('' + _o[k]).length));
	            }
	        }
	        return formatString;
	    },
	
	    // 通话时间 秒 转hh:mm:ss
	    transTime: function (stamp) {
	        var h = parseInt(stamp / (60 * 60), 10);
	        var m = parseInt((stamp - h * 60 * 60) / 60, 10);
	        var s = parseInt((stamp - h * 60 * 60 - m * 60), 10);
	        return (h > 9 ? h : '0' + h) + ':' + (m > 9 ? m : '0' + m) + ':' + (s > 9 ? s : '0' + s);
	    }
	};
	
	window.GLOBAL.util.date = D;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * 获取url信息
	 * @param  {string} url window.location
	 * @return {object}
	 */
	function _queryParam(url) {
	    var search = url.search.slice(1),
	        hashValue = url.hash.slice(1),
	        result = [],
	        paramMap = {},
	        hashMap = {};
	
	    if (search) {
	        result = search.split('&') || [];
	    }
	
	    // 解析search
	    for (var i = 0, len = result.length; i < len; i++) {
	        // 分割每一项
	        var searchArr = result[i].split('=');
	        // 存对象
	        paramMap[searchArr[0]] = searchArr[1] || '';
	    }
	
	    // 解析hash
	    if (hashValue) {
	        var hashArr = hashValue.split('=');
	        hashMap[hashArr[0]] = hashArr[1] || '';
	    }
	
	    return {
	
	        /**
	         * 获取url查询参数对象
	         * @return {Object}
	         */
	        search: function () {
	            return paramMap;
	        },
	
	        /**
	         * 获取pathname
	         * @return {string} 参数取值
	         */
	        getPathName: function () {
	            return url.pathname;
	        },
	
	        /**
	         * 获取hostname
	         * @return {string} 参数取值
	         */
	        getHostName: function () {
	            return url.hostname;
	        },
	
	        /**
	         * 获取url
	         * @return {string} 参数取值
	         */
	        getHref: function () {
	            return url.href;
	        },
	
	        /**
	         * 查询参数值
	         * @param  {string} key 查询参数
	         * @return {string} value 参数取值
	         */
	        param: function (key) {
	            return paramMap.hasOwnProperty(key) ? paramMap[key] : '';
	        },
	
	        /**
	         * 获取hash对象
	         * @return  {Object}
	         */
	        hash: function () {
	            return hashMap;
	        },
	
	        /**
	         * 查询hash值
	         * @param  key {string} 查询参数
	         * @return {string} 参数取值
	         */
	        getHash: function (key) {
	            return hashMap.hasOwnProperty(key) ? hashMap[key] : undefined;
	        }
	    };
	}
	
	window.GLOBAL.util.param = _queryParam(window.location);


/***/ },
/* 6 */
/***/ function(module, exports) {

	var parser = {
	    /**
	     * 取接口返回数据中某个字段的值
	     * @param {object} obj 接口数据
	     * @param {string} paramLink 层级关系用.连接
	     * @param defaultValue 类型填充
	     */
	    getJsonValue: function (obj, paramLink, defaultValue) {
	        if (!paramLink) {
	            return;
	        }
	        var param = paramLink.split('.');
	
	        var objectChecked = angular.extend({}, obj);
	
	        for (var i = 0, len = param.length; i < len; i++) {
	            if (objectChecked && objectChecked.hasOwnProperty(param[i])) {
	                objectChecked = objectChecked[param[i]];
	            } else {
	                if (defaultValue === false || defaultValue === 0) {
	                    return defaultValue;
	                }
	
	                return defaultValue || undefined;
	            }
	        }
	        return objectChecked;
	    },
	
	    // 生成uuid
	    getUuid: function () {
	        //生成UUID http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
	        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
	    },
	
	    /**
	     * @description 转换int类型的字符串，数字中间每个三个加上','
	     * @eg: formartNumber('14245',',') ==>  '14,245'
	     */
	    formartNumber: function (val, placeholder) {
	        var str = placeholder || ',';
	
	        var value = String(val);
	
	        var result = '';
	        var l = value.length;
	        var i;
	        for (i = l - 1; i >= 0; i--) {
	            result = value[i] + result;
	            if ((l - 1 - i) % 3 === 2 && i !== 0) {
	                result = str + result;
	            }
	        }
	        return result;
	    },
	
	    /**
	     * 截取字符串
	     * @param  {[string]} target
	     * @param  {[number]} length
	     * @param  {[string]} truncation
	     */
	    truncate: function (target, length, truncation) {
	        var len = length || 30;
	        var truncationStr = !truncation ? '...' : truncation;
	        return target.length > len ? target.slice(0, len) + truncationStr : String(target);
	    }
	};
	
	window.GLOBAL.util.parser = parser;


/***/ },
/* 7 */
/***/ function(module, exports) {

	var valid = {
	    verifyMultiIds: function (idList) {
	        var ids = idList.replace(/[\r\n\s]/gm, ',');
	        var newIds = ids.replace(/(\d+,+)/g, '');
	        if (!/^(\d+[,]?)+$/g.test(newIds)) {
	            return false;
	        }
	        return ids.replace(/,+/g, ',');
	    }
	};
	
	window.GLOBAL.util.validation = valid;


/***/ },
/* 8 */
/***/ function(module, exports) {

	// 获取cookie对象
	function _readCookie() {
	    return document.cookie;
	}
	
	/**
	 *   获取cookie集合
	 */
	function _getCookieHash() {
	    var cookieArr = _cookie.split(';');
	    var cookieHash = {};
	    for (var i = 0; i < cookieArr.length; i++) {
	        if (cookieArr[i].indexOf('=') != -1)
	            cookieHash[cookieArr[i].split('=')[0].replace(/(^\s*)/g, '').replace(/(\s*$)/g, '')] = unescape(cookieArr[i].split('=')[1]).replace(/(^\s*)/g, '').replace(/(\s*$)/g, '');
	    }
	    return cookieHash;
	}
	
	var _cookie = _readCookie();
	
	var _cookieHash = _getCookieHash();
	
	var ck = {
	    /**
	     * 获取cookie信息
	     */
	    oStr: _cookie,
	
	    /**
	     *   重新获取cookie信息
	     */
	    read: function () {
	        ck.oStr = _readCookie();
	    },
	
	    /**
	     *   设置cookie信息
	     *   @param {string,string,string,string,string} sName 名称 sValue 值 dExpire 过期时间 sDomain 所在域 sPath 路径
	     */
	    setCookie: function (sName, sValue, dExpire, sDomain, sPath) {
	        var _cookieString = sName + '=' + escape(sValue);
	        if (dExpire) _cookieString += '; expires=' + dExpire.toGMTString();
	        if (sDomain) _cookieString += '; domain=' + sDomain;
	        if (sPath) _cookieString += '; path=' + sPath;
	        document.cookie = _cookieString;
	        ck.refresh();
	    },
	    /**
	     *   删除cookie值
	     *   @param {string} sName 名称
	     */
	    deleteCookie: function (sName) {
	        var _date = new Date(1);
	        document.cookie = sName + '=;expires=' + _date.toGMTString();
	        ck.refresh();
	    },
	    /**
	     *   刷新cookie值
	     */
	    refresh: function () {
	        ck.read();
	        ck.values = _getCookieHash();
	    },
	
	    /**
	     * 获取cookie的值
	     * @param  {string} key
	     * @return {string}
	     */
	    getCookie: function (key) {
	        return _cookieHash[key];
	    }
	};
	
	//初始化设置
	ck.values = _cookieHash;
	
	GLOBAL.util.cookie = ck;


/***/ }
/******/ ]);
//# sourceMappingURL=index.min.js.map